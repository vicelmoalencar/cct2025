-- Criar tabela de comentários
CREATE TABLE IF NOT EXISTS public.lesson_comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lesson_id BIGINT NOT NULL,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Criar tabela de likes
CREATE TABLE IF NOT EXISTS public.lesson_likes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lesson_id BIGINT NOT NULL,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(lesson_id, user_id)
);

-- Criar tabela de favoritos
CREATE TABLE IF NOT EXISTS public.lesson_favorites (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lesson_id BIGINT NOT NULL,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(lesson_id, user_id)
);

-- Criar índices para melhor performance
CREATE INDEX IF NOT EXISTS idx_lesson_comments_lesson_id ON public.lesson_comments(lesson_id);
CREATE INDEX IF NOT EXISTS idx_lesson_comments_user_id ON public.lesson_comments(user_id);
CREATE INDEX IF NOT EXISTS idx_lesson_likes_lesson_id ON public.lesson_likes(lesson_id);
CREATE INDEX IF NOT EXISTS idx_lesson_likes_user_id ON public.lesson_likes(user_id);
CREATE INDEX IF NOT EXISTS idx_lesson_favorites_lesson_id ON public.lesson_favorites(lesson_id);
CREATE INDEX IF NOT EXISTS idx_lesson_favorites_user_id ON public.lesson_favorites(user_id);

-- Criar políticas de segurança RLS (Row Level Security)
ALTER TABLE public.lesson_comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.lesson_likes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.lesson_favorites ENABLE ROW LEVEL SECURITY;

-- Políticas para comentários
CREATE POLICY "Comentários visíveis para todos" ON public.lesson_comments
    FOR SELECT USING (true);

CREATE POLICY "Usuários podem criar seus próprios comentários" ON public.lesson_comments
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Usuários podem editar seus próprios comentários" ON public.lesson_comments
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Usuários podem deletar seus próprios comentários" ON public.lesson_comments
    FOR DELETE USING (auth.uid() = user_id);

-- Políticas para likes
CREATE POLICY "Likes visíveis para todos" ON public.lesson_likes
    FOR SELECT USING (true);

DROP POLICY IF EXISTS "Usuários podem dar/remover seus próprios likes" ON public.lesson_likes;

CREATE POLICY "Usuários podem dar likes" ON public.lesson_likes
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Usuários podem remover seus próprios likes" ON public.lesson_likes
    FOR DELETE USING (auth.uid() = user_id);

-- Políticas para favoritos
CREATE POLICY "Favoritos visíveis para o próprio usuário" ON public.lesson_favorites
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Usuários podem gerenciar seus próprios favoritos" ON public.lesson_favorites
    FOR ALL USING (auth.uid() = user_id);

-- Criar função para atualizar updated_at
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Criar trigger para atualizar updated_at em comentários
CREATE TRIGGER handle_updated_at
    BEFORE UPDATE ON public.lesson_comments
    FOR EACH ROW
    EXECUTE PROCEDURE public.handle_updated_at();
